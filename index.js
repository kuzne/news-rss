require('dotenv').config();
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const fs = require('fs');
const path = require('path');
const parseSportNews = require("./parseSportNews");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const sessionString = process.env.SESSION_STRING;
const targetChannel = process.env.TARGET_CHANNEL;
const phoneNumber = process.env.PHONE;

const filePath = process.env.RAILWAY_VOLUME_PATH
    ? path.join(process.env.RAILWAY_VOLUME_PATH, 'sent.json')
    : './sent.json';

const daysBack = 2; // –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–∞—Ä—Å–∏–º
const keywords = ['–ì–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', '–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', '–ì–ª–∞–≤–Ω–æ–µ –∫ –∏—Å—Ö–æ–¥—É', '–≤—ã–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π', '–ò—Ç–æ–≥–∏ –¥–Ω—è',
'–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —ç—Ç–æ–π –Ω–æ—á—å—é', '–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∑–∞ –¥–µ–Ω—å', '–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏', '–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏'];
const sourceChannels = ['@if_market_news', '@newkal', '@kontext_channel', '@meduzalive', '@echoonline_news', '@rian_ru', '@omyinvestments',
'@interfaxonline', '@kommersant', '@divgen'];

const channelNames = {
    '@if_market_news': 'IF News',
    '@newkal': '–ù–æ–≤—ã–π –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    '@kontext_channel': '–ö–æ–Ω—Ç–µ–∫—Å—Ç',
    '@meduzalive': '–ú–µ–¥—É–∑–∞',
    '@echoonline_news': '–≠—Ö–æ',
    '@rian_ru': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏',
    '@omyinvestments': '–ú–æ–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
    '@interfaxonline': '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å',
    '@kommersant': '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä',
    '@divgen': 'DIVGEN –ö–∞—Ä—Ç–∞ –°–í–û',
}

const now = Math.floor(Date.now() / 1000); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ Unix-—Ñ–æ—Ä–º–∞—Ç–µ
const twoDaysAgo = now - (daysBack * 86400); // 86400 = —Å–µ–∫—É–Ω–¥ –≤ —Å—É—Ç–∫–∞—Ö



// –°–µ—Å—Å–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const session = new StringSession(sessionString || '');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const client = new TelegramClient(session, apiId, apiHash, {
    connectionRetries: 5,
});

if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, '[]', 'utf-8');
}

const sentMessages = new Set(JSON.parse(fs.readFileSync(filePath, 'utf-8') || []));

async function main() {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');

    await client.start({
        phoneNumber: phoneNumber,
        phoneCode: async () => await input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
        password: async () => await input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: '), // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω 2FA
        onError: (err) => console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err),
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const newSession = client.session.save();
    console.log('SESSION_STRING –¥–ª—è .env:', newSession);

        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');

        const newMessages = [];

        for (const channel of sourceChannels) {
            try {
                const messages = await client.getMessages(channel, { limit: 100 });

                for (const msg of messages) {
                    if (!msg.text || msg.date < twoDaysAgo) continue;
                    if (sentMessages.has(msg.id)) continue;
                    if (!keywords.some((kw) => msg.text.includes(kw))) {
                        continue;
                    }

                    if (channel === '@divgen' && msg.groupedId?.value) {
                        const groupedId = msg.groupedId?.value;
                        const albumMessages = messages.filter(m => m.groupedId?.value === groupedId).map(m => m.id);
                        msg.albumMessages = albumMessages;
                    }

                    msg.channel = channel;

                    newMessages.push(msg);
                }
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ ${channel}:`, err.message);
            }
        }

    const sportNews = await parseSportNews();

    if (sportNews) {
        await client.sendMessage(targetChannel, {
            message: sportNews,
            parseMode: 'html',
        });
    }

    if(!newMessages.length) {
        console.log('‚úÖ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç');
        process.exit(0);
    }

    newMessages.sort((a, b) => a.date - b.date);

        for (const message of newMessages) {
            try{

                console.log('üì¢ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.text.substring(0, 50) + '...');

                if (message.channel === '@divgen') {
                    await client.forwardMessages(targetChannel, { messages: [...message.albumMessages || message.id], fromPeer: message.channel });
                } else {
                    const messageDate = new Date((message.date + 60 * 60 * 2) * 1000); // Telegram date –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    const formattedDate = formatDate(messageDate);

                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
                    const messageWithDate = `üìÖ **${formattedDate} | ${channelNames[message.channel]}**\n\n${message.text}`;

                    await client.sendMessage(targetChannel, {
                        message: messageWithDate,
                    });
                }

                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                sentMessages.add(message.id);
                console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!');
                await sleep(500); // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥-–±–∞–Ω–∞

            } catch (err){
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${message.text.substring(0, 50)}:`, err.message);
            }
        }
    const trimmedMessages = trimSet(sentMessages, 150, 50);
    fs.writeFileSync(filePath, JSON.stringify([...trimmedMessages]));

    process.exit(0);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function input(prompt) {
    return new Promise((resolve) => {
        const readline = require('readline').createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        readline.question(prompt, (answer) => {
            readline.close();
            resolve(answer);
        });
    });
}

function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü—ã 0-11
    const year = String(date.getFullYear()).slice(-2);
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    return `${hours}:${minutes} ${day}.${month}.${year}`;
}

function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

function trimSet(set, maxSize = 150, removeCount = 50) {
    if (set.size > maxSize) {
        const itemsToRemove = Array.from(set).slice(0, removeCount);
        itemsToRemove.forEach(item => set.delete(item));
    }
    return set;
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);